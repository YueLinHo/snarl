VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
  Persistable = 0  'NotPersistable
  DataBindingBehavior = 0  'vbNone
  DataSourceBehavior  = 0  'vbNone
  MTSTransactionMode  = 0  'NotAnMTSObject
END
Attribute VB_Name = "TAppsPage"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Option Explicit

    '/*********************************************************************************************
    '/
    '/  File:           TAppsPage.cls
    '/
    '/  Description:    The registered applications preferences page
    '/
    '/  © 2009 full phat products
    '/
    '/  This file may be used under the terms of the Simplified BSD Licence
    '/
    '*********************************************************************************************/

Dim mCurrentApp As TApp
Dim mPage As BPrefsPage
Dim WithEvents theClassPanel As TConfigureClassPanel
Attribute theClassPanel.VB_VarHelpID = -1

Implements KPrefsPage

Private Sub KPrefsPage_AllAttached()
End Sub

Private Sub KPrefsPage_Attached()
Dim pc As BControl
Dim pm As CTempMsg

    On Error Resume Next

    With mPage
        .SetMargin 0

'        .Add new_BPrefsControl("banner", "", "Registered Applications")

        Set pm = New CTempMsg
        pm.Add "item-height", 26&
        Set pc = new_BPrefsControl("listbox", "cb>apps", "", "", "0", pm)
        pc.SizeTo 0, (8 * 26) + 2
        .Add pc

        .Add new_BPrefsControl("fancytoolbar", "ftb>app", "Details|Settings...|Unregister|Allow||Quit")

        Set pm = New CTempMsg
        pm.Add "text", "Use the same settings for all notification classes?"
        pm.Add "align", 1
        pm.Add "inset_by", 0
        .Add new_BPrefsControl("fancytoggle", "ft>use_same", , , "0", pm)
'    mPage.Add new_BPrefsControl("label", "", "If enabled, Snarl will apply the settings defined for the <Other> or <All> class to all notifications generated by the application.")

'        .Add new_BPrefsControl("banner", "", "Notification Classes")

        Set pm = New CTempMsg
        pm.Add "checkboxes", 1
        pm.Add "item-height", 22&
        Set pc = new_BPrefsControl("listbox", "lb>classes", "", "", 1, pm)
        pc.SizeTo 0, (22 * 4) + 2
        .Add pc

        .Add new_BPrefsControl("fancybutton2", "fb>cfg_class", "Configure...")

    End With

    ' /* now, update the app list content */

    uUpdateAppList

End Sub

Private Sub KPrefsPage_ControlChanged(Control As BControl, ByVal Value As String)
Dim pc As BControl
Dim sz As String
Dim lr As VbMsgBoxResult

    Debug.Print "[" & mPage.GetName() & "]: ControlChanged '" & Control.GetName() & "' >> '" & Value & "'"

    Select Case Control.GetName()

    Case "ft>use_same"
        ' /* sort out the Classes listbox */
        mCurrentApp.SetUseSameSettingsForAllClasses (Value = "1")
        uUpdateClassList


    Case "cb>apps"
        Set mCurrentApp = g_AppRoster.AppAt(Val(Value))
        If Not (mCurrentApp Is Nothing) Then
            Debug.Print "current selected app is " & mCurrentApp.Name & " (" & mCurrentApp.Signature & ") - updating classes..."
            
            ' /* set the "use one class" toggle button, this updates the class list */
            prefskit_SetValue mPage.Panel, "ft>use_same", IIf(mCurrentApp.UseSameSettingsForAllClasses, "1", "0")

            If mPage.Find("ftb>app", pc) Then
                prefskit_SetItem pc, 1, "enabled", (mCurrentApp.HasAbout)
                prefskit_SetItem pc, 2, "enabled", (mCurrentApp.HasConfig)
                ' /* V42.21: "Unregister" button */
                prefskit_SetItem pc, 3, "enabled", (mCurrentApp.Token <> gSnarlToken)
                ' /* "revoke ban" */
                prefskit_SetItem pc, 4, "enabled", (mCurrentApp.Token <> gSnarlToken)
                prefskit_SetItem pc, 4, "text", IIf(mCurrentApp.IsBanned(), "Allow", "Ban")
                ' /* R2.4.2 DR3: "quit" button */
                prefskit_SetItem pc, 6, "enabled", (mCurrentApp.IsQuittable())

            Else
                Debug.Print "TAppsPage.ControlChanged(): 'ftb>app' control not found"

            End If

        Else
            Debug.Print "TAppsPage.ControlChanged(): error setting current selected app"

        End If


    Case "lb>classes"
        ' /* set the class information */

        If (mCurrentApp Is Nothing) Then
            g_Debug "TAppsPage.ControlChanged(): no current selected app", LEMON_LEVEL_CRITICAL
            Exit Sub

        End If

        Debug.Print "TAppsPage.ControlChanged(): [lb>classes] app is: " & mCurrentApp.Name

        ' /* get the selected class from the listbox */

        Set gSelectedClass = mCurrentApp.AlertAt(Val(Value))
        If (gSelectedClass Is Nothing) Then _
            g_Debug "TAppPage.ControlChanged(): class #" & Value & " for '" & mCurrentApp.Name & "' doesn't exist", LEMON_LEVEL_WARNING

        ' /* if the class configuration panel is open, tell it to update */

        If Not (theClassPanel Is Nothing) Then _
            theClassPanel.ClassChanged


    Case "ftb>app"
        If Not (mCurrentApp Is Nothing) Then

            Select Case Val(Value)
            Case 1
                ' /* details (about)*/
                mCurrentApp.DoAbout

            Case 2
                ' /* configure */
                mCurrentApp.DoSettings Control.Page.Panel.hWnd

            Case 3
                ' /* unregister */
                lr = MsgBox("Do you want to delete the settings for " & mCurrentApp.Name & "?  (If you're not sure, select 'No').", _
                            vbQuestion Or vbYesNoCancel, _
                            "Unregister Application")

                If (lr = vbYes) Or (lr = vbNo) Then _
                    g_AppRoster.Unregister mCurrentApp.Token, mCurrentApp.Password, (lr = vbYes)

            Case 4
                ' /* block/unblock */
                mCurrentApp.SetBlocked Not mCurrentApp.IsBanned
                uUpdateAppList

            Case 6
                ' /* quit */
                mCurrentApp.DoQuitPlease

            End Select

        End If

    End Select

End Sub

Private Sub KPrefsPage_ControlInvoked(Control As BControl)

    Debug.Print "[" & mPage.GetName() & "]: ControlInvoked '" & Control.GetName() & "'"

    Select Case Control.GetName()

    Case "cb>apps"
        If Not (mCurrentApp Is Nothing) Then _
            mCurrentApp.DoSettings Control.Page.Panel.hWnd


    Case "fb>cfg_class", "lb>classes"
        If (gSelectedClass Is Nothing) Then
            g_Debug "TAppsPage.ControlInvoked(): no currently selected class", LEMON_LEVEL_WARNING

        Else

            If (theClassPanel Is Nothing) Then
                Set theClassPanel = New TConfigureClassPanel
                theClassPanel.Go mPage.Panel.hWnd
                theClassPanel.SetFocus

            End If

        End If

    End Select

End Sub

Private Sub KPrefsPage_ControlNotify(Control As BControl, ByVal Notification As String, Data As melon.MMessage)

    Debug.Print "[" & mPage.GetName() & "]: ControlNotify '" & Control.GetName() & "' >> '" & Notification & "'"

    Select Case Control.GetName()
    Case "cb>apps"
        ' /* applications list box */
        Select Case Notification
        Case "update_list"
            uUpdateAppList True

        Case "update_classes"
            If (NOTNULL(Data)) And (NOTNULL(mCurrentApp)) Then
                If Data.What = mCurrentApp.Token Then _
                    uUpdateClassList

            End If

        Case "show_sidebar"
            If NOTNULL(theClassPanel) Then _
                theClassPanel.Show

        Case "hide_sidebar"
            If NOTNULL(theClassPanel) Then _
                theClassPanel.Hide

        End Select

    Case "lb>classes"
        ' /* notification classes list box */
        If Notification = "checked" Then
            If NOTNULL(gSelectedClass) Then _
                gSelectedClass.SetValue "enabled", prefskit_GetItem(Control, "checked")

        End If

    End Select

End Sub

Private Sub KPrefsPage_Create(Page As BPrefsPage)

    Set mPage = Page
    mPage.SetMargin 0
    
End Sub

Private Sub KPrefsPage_Destroy()

    If Not (theClassPanel Is Nothing) Then _
        theClassPanel.Quit

    Set mPage = Nothing
    Set mCurrentApp = Nothing

End Sub

Private Sub KPrefsPage_Detached()
End Sub

Private Sub KPrefsPage_GetPreferredSize(Width As Long, Height As Long)
End Sub

Private Function KPrefsPage_hWnd() As Long
End Function

Private Sub KPrefsPage_PanelResized(ByVal Width As Long, ByVal Height As Long)
End Sub

Private Sub uUpdateClassList()

    If (mPage Is Nothing) Or (mCurrentApp Is Nothing) Then _
        Exit Sub

Dim pc As BControl

    If Not mPage.Find("lb>classes", pc) Then _
        Exit Sub

Dim sz As String
Dim i As Long

    With mCurrentApp
        If .CountAlerts() = 0 Then
            ' /* corrupt! */
            g_Debug "TAppsPage.uUpdateClassList(): '" & .Name & "' has no alerts", LEMON_LEVEL_CRITICAL
            pc.SetText ""

        ElseIf (.CountAlerts() = 1) Or (mCurrentApp.UseSameSettingsForAllClasses) Then
            ' /* only the '_all' setting */
            pc.SetText "[All notifications]#?0"
            prefskit_SetItem pc, 1, "checked", IIf(.AlertAt(1).IsEnabled, 1&, 0&)
            pc.SetValue "1"

        Else
            ' /* multiple alerts */
            sz = "[Other notifications]#?0|"
            For i = 2 To .CountAlerts()
                sz = sz & .AlertAt(i).Description() & "#?" & CStr(i) & IIf(i < .CountAlerts(), "|", "")

            Next i
            pc.SetText sz

            For i = 1 To .CountAlerts()
                prefskit_SetItem pc, i, "checked", IIf(.AlertAt(i).IsEnabled, 1&, 0&)

            Next i
            pc.SetValue "1"

        End If
    End With

End Sub

Private Sub uUpdateAppList(Optional ByVal AndSelectFirstItem As Boolean)

    If (mPage Is Nothing) Then _
        Exit Sub

Dim pc As BControl

    If Not mPage.Find("cb>apps", pc) Then _
        Exit Sub

Dim sv As String
Dim sz As String
Dim i As Long

    sv = pc.GetValue()

    With g_AppRoster
        If .CountApps() Then
            For i = 1 To .CountApps()
                sz = sz & .AppAt(i).NameEx & IIf(.AppAt(i).IsBanned, " (Banned)", "") & "#?" & CStr(i) & "#?" & "" & IIf(i < .CountApps(), "|", "")
            
            Next i
        End If
    End With

    ' /* set the content */
    pc.SetText sz

    ' /* set the icons */

    With g_AppRoster
        If .CountApps() Then
            For i = 1 To .CountApps()
                If .AppAt(i).IsBanned Then
                    sz = g_MakePath(App.Path) & "etc\icons\ext-error.png"

                Else
                    sz = g_TranslateIconPath(.AppAt(i).Icon, "")
                    Debug.Print .AppAt(i).Icon & " >> " & sz

                    If Not g_Exists(sz) Then _
                        sz = g_MakePath(App.Path) & "etc\icons\no_icon.png"

                End If
                prefskit_SetItem pc, i, "image-file", sz

            Next i
        End If
    End With

    If AndSelectFirstItem Then
        pc.SetValue "1"

    Else
        pc.SetValue sv

    End If

End Sub

Private Sub theClassPanel_Done()

    Set theClassPanel = Nothing

End Sub
