VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
  Persistable = 0  'NotPersistable
  DataBindingBehavior = 0  'vbNone
  DataSourceBehavior  = 0  'vbNone
  MTSTransactionMode  = 0  'NotAnMTSObject
END
Attribute VB_Name = "TAppsPage"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Option Explicit

'/*********************************************************************************************
'/
'/  File:           TAppsPage.cls
'/
'/  Description:    The registered applications preferences page
'/
'/  © 2009 full phat products
'/
'/  This file may be used under the terms of the Simplified BSD Licence
'/
'*********************************************************************************************/

Dim mPage As BPrefsPage

Dim WithEvents theClassPanel As TConfigureClassPanel
Attribute theClassPanel.VB_VarHelpID = -1

Dim mCurrentApp As TApp

Implements KPrefsPage

Private Sub KPrefsPage_AllAttached()
End Sub

Private Sub KPrefsPage_Attached()
Dim pc As BControl
Dim pm As CTempMsg

    On Error Resume Next

    With mPage
        .SetMargin 0

        .Add new_BPrefsControl("banner", "", "Registered Applications")

        Set pm = New CTempMsg
        pm.Add "item-height", 30&
        Set pc = new_BPrefsControl("listbox", "cb>apps", "", "", "0", pm)
        pc.SizeTo 0, 122
        .Add pc

        .Add new_BPrefsControl("fancytoolbar", "ftb>app", "Details|Settings...|Unregister|Allow||Quit")

        Set pm = New CTempMsg
        pm.Add "text", "Use the same settings for all notification classes?"
        pm.Add "align", 1
        pm.Add "inset_by", 0
        .Add new_BPrefsControl("fancytoggle", "ft>use_same", , , "0", pm)
'    mPage.Add new_BPrefsControl("label", "", "If enabled, Snarl will apply the settings defined for the <Other> or <All> class to all notifications generated by the application.")

        .Add new_BPrefsControl("banner", "", "Notification Classes")

        Set pm = New CTempMsg
        pm.Add "checkboxes", 1
        .Add new_BPrefsControl("listbox", "lb>classes", "", "", 1, pm)
        .Add new_BPrefsControl("fancybutton2", "fb>cfg_class", "Configure...")



'Dim psp As TSmallPage
'
'    Set pm = New CTempMsg
'    pm.Add "height", 200
'    Set pc = new_BPrefsControl("tabstrip", "ts>class", "", , , pm)
'
'    Set psp = New TSmallPage
'    psp.Name = "gen"
'    BTabStrip_AddPage pc, "General", new_BPrefsPage("pg>" & psp.Name, , psp)
'
'    Set psp = New TSmallPage
'    psp.Name = "gfx"
'    BTabStrip_AddPage pc, "Visuals", new_BPrefsPage("pg>" & psp.Name, , psp)
'
'    Set psp = New TSmallPage
'    psp.Name = "aud"
'    BTabStrip_AddPage pc, "Audio", new_BPrefsPage("pg>" & psp.Name, , psp)
'
'    If gDebugMode Then
'        Set psp = New TSmallPage
'        psp.Name = "net"
'        BTabStrip_AddPage pc, "Forwarding", new_BPrefsPage("pg>" & psp.Name, , psp)
'
'    End If
'
'    Set psp = New TSmallPage
'    psp.Name = "adv"
'    BTabStrip_AddPage pc, "Advanced", new_BPrefsPage("pg>" & psp.Name, , psp)
'
'    mPage.Add pc

        .Add new_BPrefsControl("label", "", " ")

    End With

    ' /* now, update the app list content */

    bUpdateAppList
'    pAppCombo.SetValue "1"

End Sub

Private Sub KPrefsPage_ControlChanged(Control As BControl, ByVal Value As String)
'Dim pm As CTempMsg
Dim pc As BControl
Dim sz As String
Dim pa As TApp
Dim lr As VbMsgBoxResult

    Debug.Print "[" & mPage.GetName() & "]: ControlChanged '" & Control.GetName() & "' >> '" & Value & "'"

    Select Case Control.GetName()

    Case "ft>use_same"

        If Not mPage.Find("cb>apps", pc) Then _
            Exit Sub

        ' /* get the selected app from the combo */

        Set pa = g_AppRoster.AppAt(Val(pc.GetValue()))
        If (pa Is Nothing) Then _
            Exit Sub

        Debug.Print ">> app is: " & pa.Name
        pa.SetUseSameSettingsForAllClasses (Value = "1")

        ' /* sort out the Classes listbox */

        If mPage.Find("lb>classes", pc) Then
            If Value = "1" Then
                ' /* select the first entry (<All> or <Other>) in the class list and disable the listbox */
                pc.SetValue "1"
                pc.SetEnabled False

            Else
                ' /* enable it */
                pc.SetEnabled True

            End If

        End If



    Case "cb>apps"

        Set mCurrentApp = g_AppRoster.AppAt(Val(Value))
        If Not (mCurrentApp Is Nothing) Then

            Debug.Print "current selected app is " & mCurrentApp.Name & " (" & mCurrentApp.Signature & ") - updating classes..."
            uUpdateClassList

            Debug.Print mCurrentApp.Icon

            If mPage.Find("ftb>app", pc) Then
'                prefskit_SetItem pc, 1, "enabled", IIf((mCurrentApp.Flags And SNARL41_APP_HAS_ABOUT), 1&, 0&)

                prefskit_SetItem pc, 1, "enabled", (mCurrentApp.HasAbout)
                prefskit_SetItem pc, 2, "enabled", (mCurrentApp.HasConfig)

                ' /* V42.21: "Unregister" button */
                prefskit_SetItem pc, 3, "enabled", (mCurrentApp.Token <> gSnarlToken)
                ' /* "revoke ban" */
                prefskit_SetItem pc, 4, "enabled", (mCurrentApp.Token <> gSnarlToken)
                prefskit_SetItem pc, 4, "text", IIf(mCurrentApp.IsBanned(), "Allow", "Ban")

                ' /* R2.4.2 DR3: "quit" button */
                prefskit_SetItem pc, 6, "enabled", (mCurrentApp.IsDaemon)

            Else
                Debug.Print "TAppsPage.ControlChanged(): 'ftb>app' control not found"

            End If

        Else
            Debug.Print "TAppsPage.ControlChanged(): error setting current selected app"

        End If


    Case "lb>classes"
        ' /* set the class information */

        If (mCurrentApp Is Nothing) Then
            g_Debug "TAppsPage.ControlChanged(): no current selected app", LEMON_LEVEL_CRITICAL
            Exit Sub

        End If

        Debug.Print "TAppsPage.ControlChanged(): [lb>classes] app is: " & mCurrentApp.Name

        ' /* get the selected class from the listbox */

        Set gSelectedClass = mCurrentApp.AlertAt(Val(Value))
        If (gSelectedClass Is Nothing) Then _
            g_Debug "TAppPage.ControlChanged(): class #" & Value & " for '" & pa.Name & "' doesn't exist", LEMON_LEVEL_WARNING

        ' /* if the class configuration panel is open, tell it to update */

        If Not (theClassPanel Is Nothing) Then _
            theClassPanel.ClassChanged


    Case "ftb>app"
        If Not (mCurrentApp Is Nothing) Then

            Select Case Val(Value)
            Case 1
                ' /* details (about)*/
                mCurrentApp.DoAbout

            Case 2
                ' /* configure */
                mCurrentApp.DoSettings

            Case 3
                ' /* unregister */
                lr = MsgBox("Do you want to delete the settings for " & mCurrentApp.Name & "?  (If you're not sure, select 'No').", _
                            vbQuestion Or vbYesNoCancel, _
                            "Unregister Application")

                If (lr = vbYes) Or (lr = vbNo) Then _
                    g_AppRoster.Unregister mCurrentApp.Token, mCurrentApp.Password, (lr = vbYes)

            Case 4
                ' /* block/unblock */
                mCurrentApp.SetBlocked Not mCurrentApp.IsBanned
                bUpdateAppList

            Case 6
                ' /* quit */
                mCurrentApp.DoQuitPlease

            End Select

        End If

    End Select

End Sub

Private Sub KPrefsPage_ControlInvoked(Control As BControl)

    Debug.Print "[" & mPage.GetName() & "]: ControlInvoked '" & Control.GetName() & "'"

    Select Case Control.GetName()

    Case "cb>apps"
        If Not (mCurrentApp Is Nothing) Then _
            mCurrentApp.DoSettings


    Case "fb>cfg_class", "lb>classes"
        If (gSelectedClass Is Nothing) Then
            g_Debug "TAppsPage.ControlInvoked(): no currently selected class", LEMON_LEVEL_WARNING

        Else

            If (theClassPanel Is Nothing) Then
                Set theClassPanel = New TConfigureClassPanel
                theClassPanel.Go mPage.Panel.hWnd
                theClassPanel.SetFocus

            End If

        End If

    End Select

End Sub

Private Sub KPrefsPage_ControlNotify(Control As BControl, ByVal Notification As String, Data As melon.MMessage)
Dim pm As CTempMsg
Dim sz As String

    Debug.Print "[" & mPage.GetName() & "]: ControlNotify '" & Control.GetName() & "' >> '" & Notification & "'"

    Select Case Control.GetName()
    Case "cb>apps"
        If Notification = "update_list" Then
            bUpdateAppList True

        ElseIf Notification = "update_classes" Then
            If (Not (Data Is Nothing)) And (Not (mCurrentApp Is Nothing)) Then
                If Data.What = mCurrentApp.Token Then _
                    uUpdateClassList

            End If
        End If


    Case "lb>classes"
        If Notification = "checked" Then
            If Not (gSelectedClass Is Nothing) Then
                ' /* get the item's checked state */
                Set pm = New CTempMsg
                pm.Add "what", "checked"
                sz = Control.DoExCmd(B_GET_ITEM, pm)        ' // get value of checkbox for current item

                Debug.Print gSelectedClass.Name & " -> " & sz
                gSelectedClass.SetValue "enabled", sz

            Else

            End If

        End If

    End Select

End Sub

Private Sub KPrefsPage_Create(Page As BPrefsPage)

    Set mPage = Page
    mPage.SetMargin 0
    
End Sub

Private Sub KPrefsPage_Destroy()

    Set mPage = Nothing

    If Not (theClassPanel Is Nothing) Then _
        theClassPanel.Quit

End Sub

Private Sub KPrefsPage_Detached()

End Sub

Private Sub KPrefsPage_GetPreferredSize(Width As Long, Height As Long)

End Sub

Private Function KPrefsPage_hWnd() As Long

End Function

Private Sub KPrefsPage_PanelResized(ByVal Width As Long, ByVal Height As Long)

End Sub

Private Sub uUpdateClassList()

    If (mPage Is Nothing) Or (mCurrentApp Is Nothing) Then _
        Exit Sub

'Dim pa As TApp
'
'    Set pa = g_AppRoster.AppAt(Val(Value))
'    If (pa Is Nothing) Then _
'        Exit Sub

Dim pc As BControl

'    If Not mPage.Find("ts>class", pc) Then _
'        Exit Sub
'
'    pc.SetEnabled False

    If Not mPage.Find("ft>use_same", pc) Then _
        Exit Sub

    pc.SetValue IIf(mCurrentApp.UseSameSettingsForAllClasses, "1", "0")

    If Not mPage.Find("lb>classes", pc) Then _
        Exit Sub

    pc.DoExCmd B_RESET_CONTENT

Dim sz As String
Dim i As Long
Dim c As Long
Dim pm As CTempMsg

    With mCurrentApp
        If .CountAlerts() = 0 Then
            ' /* corrupt! */
            g_Debug "TAppsPage.uUpdateClassList(): '" & .Name & "' has no alerts", LEMON_LEVEL_CRITICAL

        ElseIf .CountAlerts() = 1 Then
            ' /* only the '_all' setting */

            pc.SetText "<All>#?0"
            Set pm = New CTempMsg
            pm.Add "index", 1
            pm.Add "checked", IIf(.AlertAt(1).IsEnabled, 1&, 0&)
            pc.DoExCmd B_SET_ITEM, pm
            pc.SetValue "1"

        Else
            ' /* multiple alerts */

            sz = "<Other>#?0|"
            For i = 2 To .CountAlerts()
                sz = sz & .AlertAt(i).Description() & "#?" & CStr(i) & IIf(i < .CountAlerts(), "|", "")

            Next i

            pc.SetText sz

            Set pm = New CTempMsg
            For i = 1 To .CountAlerts()
                pm.Remove "index"
                pm.Add "index", i
                pm.Replace "checked", IIf(.AlertAt(i).IsEnabled, 1&, 0&)
               pc.DoExCmd B_SET_ITEM, pm

            Next i

            pc.SetValue "1"

        End If

    End With

End Sub

Friend Sub bUpdateAppList(Optional ByVal AndSelectFirstItem As Boolean)

    If (mPage Is Nothing) Then _
        Exit Sub

Dim pc As BControl

    If Not mPage.Find("cb>apps", pc) Then _
        Exit Sub

Dim sv As String
Dim sz As String
Dim i As Long

    sv = pc.GetValue()

    With g_AppRoster
        If .CountApps() Then
            For i = 1 To .CountApps()
                sz = sz & .AppAt(i).NameEx & IIf(.AppAt(i).IsBanned, " (Banned)", "") & "#?" & CStr(i) & "#?" & "" & IIf(i < .CountApps(), "|", "")
            
            Next i
        End If
    End With

    ' /* set the content */

    pc.SetText sz

    ' /* set the icons */

Dim pm As CTempMsg

    Set pm = New CTempMsg

    With g_AppRoster
        If .CountApps() Then
            For i = 1 To .CountApps()
                pm.Replace "index", i
                If .AppAt(i).IsBanned Then
                    sz = g_MakePath(App.Path) & "etc\icons\ext-error.png"

                Else
                    sz = g_TranslateIconPath(.AppAt(i).Icon, "")
                    Debug.Print .AppAt(i).Icon & " >> " & sz

                    If Not g_Exists(sz) Then _
                        sz = g_MakePath(App.Path) & "etc\icons\no_icon.png"

                End If

                pm.Replace "image-file", sz
                pc.DoExCmd B_SET_ITEM, pm

            Next i
        End If
    End With

    If AndSelectFirstItem Then
        pc.SetValue "1"

    Else
        pc.SetValue sv

    End If

'        If g_AppRoster.CountApps() Then
'            For i = 1 To g_AppRoster.CountApps()
'                .SetValue "apps", IIf(g_AppRoster.AppAt(i).Icon <> "", g_AppRoster.AppAt(i).Icon, g_WindowIcon(g_AppRoster.AppAt(i).hWnd)), "item" & CStr(i) & ".icon"
'
'            Next i
'        End If

End Sub

'Private Sub uUpdateSubPages()
'
'    ' /* called when the selected Alert Class changes */
'
'    If (mPage Is Nothing) Then _
'        Exit Sub
'
'Dim pc As BControl
'Dim pc2 As BControl
'
'    gNoWriteConfig = True
'
'    Debug.Print ">> class is: " & gSelectedClass.Name
'
'
'    ' /* ----------------------------------- general page ----------------------------------- */
'
'
'    If (mPage.Panel.Find("ipb>timeout", pc)) And (mPage.Panel.Find("fs>gen.timeout", pc2)) Then
'        ' /* 'duration' cycle button and timeout slider */
'
'        If (gSelectedClass.GetFlags And E_CLASS_CUSTOM_DURATION) Then
'            ' /* if E_CLASS_CUSTOM_DURATION is set then the duration element is the duration in seconds */
'            pc.SetValue "3"
'            pc2.SetValue CStr(gSelectedClass.Duration)
'            pc2.SetEnabled True
'
'        Else
'            ' /* if E_CLASS_CUSTOM_DURATION is _not_ set then the duration element specifies the type */
'
'            If gSelectedClass.Duration = E_APP_DECIDES_DURATION Then
'                pc.SetValue "1"
'
'            ElseIf gSelectedClass.Duration = E_DEFAULT_DURATION Then
'                pc.SetValue "2"
'
'            End If
'
'            pc2.SetValue 0
'            pc2.SetEnabled False
'
'        End If
'    Else
'        Debug.Print "ipb>timeout or fs>gen.timeout not found"
'
'    End If
'
'    ' /* 'position' cycle button */
'
'    If mPage.Panel.Find("cyc>position", pc) Then _
'        pc.SetValue CStr(gSelectedClass.Position + 2)
'
'
'
'    ' /* ----------------------------------- visuals page ----------------------------------- */
'
'
'    If mPage.Panel.Find("ft>gfx.custom", pc) Then _
'        pc.SetValue IIf((gSelectedClass.GetFlags And E_CLASS_CUSTOM_STYLE), "1", "0")
'
'    ' /* set the style/scheme combos irrespective of whether they're enabled or not */
'
'    Debug.Print gSelectedClass.StyleName & " - " & gSelectedClass.SchemeName
'
'
'
'    ' /* ----------------------------------- audio page ----------------------------------- */
'
'    ' /* sound cycle button */
'
'
'    If mPage.Panel.Find("ipb>aud.sound", pc) Then
'        ' /* translate to: App Decides (1), Custom (2), None (3) */
'
'        If (gSelectedClass.GetFlags And E_CLASS_NO_SOUND) Then
'            i = 3
'
'        ElseIf (gSelectedClass.GetFlags And E_CLASS_CUSTOM_SOUND) Then
'            i = 2
'
'        Else
'            ' /* app decides */
'            i = 1
'
'        End If
'
'        pc.SetValue CStr(i)
'
'        ' /* enable/disable the file picker and set its content */
'
'        If mPage.Panel.Find("fp>aud.sound", pc) Then
'            pc.SetEnabled (i = 2)
'            pc.SetText gSelectedClass.CustomSound
'
'        End If
'
'    End If
'
'    ' /* R2.2 enable/disable 'Test Sound' button */
'
'    If mPage.Panel.Find("fb2>aud.test", pc) Then _
'        pc.SetEnabled (gSelectedClass.CustomSound <> "")
'
'
'
'
'
'    ' /* ---------------------------------- advanced page --------------------------------- */
'
'    ' /* duplicate suppression cycle button - translates to App Decides (1), Blocked (2), Not Blocked (3), Delayed (4) */
'
'    If mPage.Panel.Find("cyc>suppression", pc) Then
'
'        If (gSelectedClass.GetFlags() And E_CLASS_NO_DUPLICATES) Then
'            i = 2
'
'        ElseIf (gSelectedClass.GetFlags() And E_CLASS_DELAY_DUPLICATES) Then
'            i = 4
'
'        ElseIf (gSelectedClass.GetFlags() And E_CLASS_ALLOW_DUPLICATES) Then
'            i = 3
'
'        Else
'            i = 1
'
'        End If
'
'        pc.SetValue CStr(i)
'
'    Else
'        Debug.Print "cyc>suppression missing"
'
'    End If
'
'
'    ' /* R2.2: priority notification toggle */
'
'    If mPage.Panel.Find("ft>adv.priority", pc) Then _
'        pc.SetValue IIf(gSelectedClass.GetFlags And E_CLASS_PRIORITY_NOTIFICATION, "1", "0")
'
'    ' /* R2.2: notification only toggle */
'
'    If mPage.Panel.Find("ft>adv.notify_only", pc) Then _
'        pc.SetValue IIf(gSelectedClass.GetFlags And E_CLASS_NOTIFICATION_ONLY, "1", "0")
'
'
'
''
''Dim px As T_SNARL_STYLE_2
''
''
''            ' /* 'use specific scheme' toggle */
''
''            sz = IIf(gSelectedClass.UseCustomStyle, "1", "0")
''            pc.SetValue sz
''
''            If sz = "1" Then
''                sz = gSelectedClass.CustomStyle
''
''                Debug.Print ">>> looking for style: " & sz
''
''                i = g_StyleRoster.IndexOf(style_GetStyleName(sz))
''
''                If i Then
''                    g_StyleRoster.StyleAt i, px
''                    sz = style_GetSchemeName(sz)
''                    If sz = "<default>" Then
''                        ' /* first scheme */
''                        j = 1
''
''                    Else
''                        ' /* named scheme */
''                        j = g_StyleRoster.IndexOfScheme(px, sz)
''
''                    End If
''
''                End If
''
''            Else
''                sz = ""
''
''            End If
''
''
''            If (i <> 0) And (j <> 0) Then
''                If mpage.Panel.Find("cb>style", pc) Then _
''                    pc.SetValue CStr(i)
''
''                If mpage.Panel.Find("cb>scheme", pc) Then _
''                    pc.SetValue CStr(j)
''
''            Else
''
''                ' /* style wasn't found (not necessarily a problem - could be blank) */
''
''                If sz <> "" Then _
''                    g_Debug "TAppsPage.ControlChanged(): style/scheme '" & sz & "' not found", LEMON_LEVEL_WARNING
''
''                If mpage.Panel.Find("cb>style", pc) Then _
''                    pc.SetValue CStr(0)
''
''                If mpage.Panel.Find("cb>scheme", pc) Then _
''                    pc.SetValue CStr(0)
''
''            End If
''
''        End If
''
'
'    gNoWriteConfig = False
'
'End Sub

Private Sub theClassPanel_Done()

    Set theClassPanel = Nothing

End Sub
